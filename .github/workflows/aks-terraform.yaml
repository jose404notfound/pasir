name: Deploy AKS using Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the environment (e.g., dev, prod)'
        required: false
        default: 'dev'  # Default to 'dev' if no input is provided

#  push:
#    branches:
#      - main 

jobs:
  deploy_aks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/cli@v2
        with:
          azcliversion: latest

      # The default version installs the latest version of Terraform CLI.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1 

      # Step 5: Terraform fmt (Format all Terraform files)
      # This step ensures that all Terraform configuration files are formatted correctly, making them more readable and consistent.
      # It recursively formats the files in the environment directory (dev, prod, etc.) based on the input environment.
      - name: Terraform fmt (Format all Terraform files)
        run: |
          terraform fmt -recursive ./terraform/environments/${{ github.event.inputs.environment }}

      # Step 6: Initialize Terraform
      # This step initializes the Terraform configuration, downloading the necessary provider plugins, and preparing the backend for managing state.
      - name: Initialize Terraform
        run: |
          terraform init ./terraform/environments/${{ github.event.inputs.environment }}

      # Step 7: Validate Terraform
      # This step runs `terraform validate` to ensure that the configuration files are syntactically correct and that all resources are properly defined.
      - name: Validate Terraform
        run: |
          terraform validate ./terraform/environments/${{ github.event.inputs.environment }}

      # Step 8: Terraform Plan
      # This step generates an execution plan by running `terraform plan`. It shows the changes Terraform will make to the infrastructure, which allows us to review them before applying.
      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan ./terraform/environments/${{ github.event.inputs.environment }}

      # Step 9: Terraform Apply
      # This step applies the changes to the infrastructure by running `terraform apply` with the generated plan (`tfplan`).
      # The `-auto-approve` flag automatically confirms the plan, ensuring the deployment proceeds without manual confirmation.
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan ./terraform/environments/${{ github.event.inputs.environment }}
